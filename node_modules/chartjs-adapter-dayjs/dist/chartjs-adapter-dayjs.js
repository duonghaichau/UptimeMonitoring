/*!
 * chartjs-adapter-dayjs v0.2.0
 * https://www.chartjs.org
 * (c) 2019 Chart.js Contributors
 * Released under the MIT license
 */
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('chart.js'), require('dayjs'), require('dayjs/plugin/utc'), require('dayjs/plugin/weekday'), require('dayjs/plugin/advancedFormat'), require('dayjs/plugin/localizedFormat'), require('dayjs/plugin/weekOfYear')) :
typeof define === 'function' && define.amd ? define(['chart.js', 'dayjs', 'dayjs/plugin/utc', 'dayjs/plugin/weekday', 'dayjs/plugin/advancedFormat', 'dayjs/plugin/localizedFormat', 'dayjs/plugin/weekOfYear'], factory) :
(global = global || self, factory(global.Chart, global.dayjs, global.dayjs_plugin_utc, global.dayjs_plugin_weekday, global.dayjs_plugin_advancedFormat, global.dayjs_plugin_localizedFormat, global.dayjs_plugin_weekOfYear));
}(this, function (chart_js, dayjs, utc, dayjsWeekday, advancedFormat, localizedFormat, weekOfYear) { 'use strict';

dayjs = dayjs && dayjs.hasOwnProperty('default') ? dayjs['default'] : dayjs;
utc = utc && utc.hasOwnProperty('default') ? utc['default'] : utc;
dayjsWeekday = dayjsWeekday && dayjsWeekday.hasOwnProperty('default') ? dayjsWeekday['default'] : dayjsWeekday;
advancedFormat = advancedFormat && advancedFormat.hasOwnProperty('default') ? advancedFormat['default'] : advancedFormat;
localizedFormat = localizedFormat && localizedFormat.hasOwnProperty('default') ? localizedFormat['default'] : localizedFormat;
weekOfYear = weekOfYear && weekOfYear.hasOwnProperty('default') ? weekOfYear['default'] : weekOfYear;

const FORMATS = {
	datetime: 'MMM D, YYYY, h:mm:ss a',
	millisecond: 'h:mm:ss.SSS a',
	second: 'h:mm:ss a',
	minute: 'h:mm a',
	hour: 'hA',
	day: 'MMM D',
	week: 'll',
	month: 'MMM YYYY',
	quarter: '[Q]Q - YYYY',
	year: 'YYYY'
};

chart_js._adapters._date.override({
	_id: 'dayjs', // DEBUG

	/**
	 * @private
	 */
	_create: function(time) {
		dayjs.extend(utc);
		return dayjs.utc(time)
	},

	formats: function() {
		return FORMATS;
	},

	parse: function(value, format) {
		dayjs.extend(utc);
		if (typeof value === 'string' && typeof format === 'string') {
			value = dayjs.utc(value, format);
		} else if (!(value instanceof dayjs)) {
			value = dayjs.utc(value);
		}
		return value.isValid() ? value.valueOf() : null;
	},

	format: function(time, format) {
		dayjs.extend(utc);
		dayjs.extend(advancedFormat);
		dayjs.extend(localizedFormat);
		dayjs.extend(weekOfYear);
		return dayjs.utc(time).format(format);
	},

	add: function(time, amount, unit) {
		dayjs.extend(utc);
		return dayjs.utc(time).add(amount, unit).valueOf();
	},

	diff: function(max, min, unit) {
		dayjs.extend(utc);
		return dayjs.utc(max).diff(dayjs(min), unit);
	},

	startOf: function(time, unit, weekday) {
		dayjs.extend(utc);
		dayjs.extend(dayjsWeekday);
		time = dayjs.utc(time);
		if (unit === 'isoWeek') {
			return time.weekday(weekday).valueOf();
		}
		return time.startOf(unit).valueOf();
	},

	endOf: function(time, unit) {
		dayjs.extend(utc);
		return dayjs.utc(time).endOf(unit).valueOf();
	}
});

}));
